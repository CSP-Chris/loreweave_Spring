Milestone 1 Contributions:
Week 1: Updated pom.xml to target Java 17 and ensured compatibility with Spring Boot 3.

        Implemented JWT Security setup:

        Added SecurityConfig.java with stateless session handling and JWT filter.

        Created JwtAuthenticationFilter to validate tokens on requests.

        Built JwtService for token generation, validation, and username extraction.

        Added CustomUserDetailsService to load user credentials from the database.

        Configured BCryptPasswordEncoder for secure password hashing.

        Developed AuthController with /api/auth/login endpoint to authenticate users and return JWT tokens.

        Verified and updated User entity & UserRepository so authentication works with the DB.

        Configured application.properties:

        Set up H2 in-memory database for testing.

        Enabled Hibernate ddl-auto=create-drop for clean schema on each restart.

        Enabled /h2-console for debugging database content.

        Resolved merge conflicts in:

        application.properties (kept JWT + H2 config).

        pom.xml (merged in spring-security-test, Thymeleaf, and Actuator).

        Ensured the application now builds successfully and can run with JWT authentication enabled.

Learning Experience

        This week deepened my understanding of Spring Security with JWT and the importance of clean dependency management.
        Resolving merge conflicts reinforced best practices for collaborative Git workflows. Configuring the H2 database
        and Hibernate taught me effective strategies for rapid testing and schema resets. Overall, I gained practical
        experience in backend authentication and team-based development that will benefit future milestones.
Week 2 & 3:
Backend & Security Updates
‚Ä¢	Replaced JWT stateless authentication with stateful session-based authentication integrated with Spring Security and Thymeleaf.
‚Ä¢	Configured SecurityConfig.java to handle custom login/logout, session cookies, and redirect handling.
‚Ä¢	Updated AuthController.java to focus only on user registration (login/logout now fully managed by Spring Security).
‚Ä¢	Updated CustomUserDetailsService.java to load users from the database and apply a default USER role without requiring a roles table.
‚Ä¢	Removed unused JWT files (JwtService, JwtAuthenticationFilter) and cleaned up imports/dependencies in pom.xml.
‚Ä¢	Secured static resources (/css/**, /js/**, /images/**, /favicon.ico) to ensure proper page rendering without login issues.
‚Ä¢	Strengthened database configuration in application.properties and prepared for environment variable integration.
Frontend Integration
‚Ä¢	Connected Thymeleaf login (loginBSF.html) and registration (register.html) pages with the new Spring Security session-based backend.
‚Ä¢	Verified redirects: successful login goes to /welcome, failed login redirects with error flag.
DevOps & CI/CD
‚Ä¢	Added a GitHub Actions CI workflow (maven-ci.yml) to automatically run Maven build and tests on each push/PR.
‚Ä¢	Structured .github/workflows folder in the repo and confirmed integration with GitHub Actions.
‚Ä¢	Started preparations for environment variable usage (DB_USER, DB_PASS) in CI/CD pipelines.
Current Status (End of Milestone 1)
‚Ä¢	User can register, log in, and log out via the browser.
‚Ä¢	Session-based authentication works correctly with Spring Security.
‚Ä¢	Frontend pages (login, register, welcome) are integrated with backend.
‚Ä¢	CI pipeline in place with GitHub Actions running Maven build/tests.


Milestone 2
    Week 1: Focus: Transactions and Security

Created Transaction.java, TransactionRepository, TransactionService, and TransactionController to handle point transfers between users.

Built the foundation for the voting system by creating VoteController and LoreVoteRepository.

Updated LoreVote.java to include point and transaction fields (amount, receiverId, status).

Combined voting and transaction logic so each vote automatically rewards the story‚Äôs author.

Updated StoryPart.java to include an author field linked to the User entity.

Simplified TransactionService for potential reporting use only.

Cleaned up SecurityConfig.java ‚Äî removed /api/transactions/** and secured /api/votes/**.

Added WebSocketConfig.java to prepare for future messaging features.

Verified that all new endpoints (/api/votes/**) require authentication and build runs successfully.

    Week 2:
Completed the design and implementation of the /api/transactions endpoints to allow secure point transfers between users.

Developed methods for atomic balance updates with rollback functionality on failure.

Implemented server-side validation for sufficient funds and transfer restrictions to prevent fraudulent activity.

Updated SecurityConfig.java to enforce authenticated access for transaction-related endpoints.

Strengthened session-based authentication and tested login persistence across the Thymeleaf interface.

Week 3:
feat(auth): add email verification with OTP and update test configuration

- Added EmailOtpService.java to handle both email sending and OTP verification
- Updated User.java model to include `enabled` field for email verification status
- Updated AuthController.java to send OTP on registration and restrict login to verified users
- Added findByEmail() method to UserRepository.java for email lookups
- Updated SecurityConfig.java to support verified user login flow
- Added test profile configuration (application-test.properties) using H2 in-memory DB
- Fixed Maven test failure by isolating test database context
- Updated pom.xml to include spring-boot-starter-mail dependency

These updates enable email verification during registration and ensure users
cannot log in until their email address has been confirmed.


feat(ui): Add fantasy-themed welcome, login, and register pages with unified styling and animations

‚ú® Added:
- `welcome.html` ‚Äî Created hero landing page with Loreweave title, tagline, and vertical scroll layout
  ‚Ä¢ Integrated `openbook.jpeg` as hero background image
  ‚Ä¢ Added fixed ‚ÄúStart Weaving‚Äù CTA with gold hover pulse animation
  ‚Ä¢ Included ‚ÄúWhat is Loreweave,‚Äù ‚ÄúHow It Works,‚Äù and ‚ÄúTips for New Weavers‚Äù sections
  ‚Ä¢ Implemented fantasy color palette and typography using Cinzel Decorative + Cormorant Garamond

- `login.html` ‚Äî Styled login page with centered glowing glass container
  ‚Ä¢ Added Loreweave header with navigation back to home
  ‚Ä¢ Added footer with consistent design
  ‚Ä¢ Integrated gold pulse + sparkle hover animation for ‚ÄúSign In‚Äù button
  ‚Ä¢ Checkbox styling (lavender glow + golden highlight on selection)
  ‚Ä¢ Fully responsive layout centered both vertically and horizontally

- `register.html` ‚Äî Matched visual theme with login and welcome pages
  ‚Ä¢ Styled centered registration form inside glowing fantasy container
  ‚Ä¢ Matching button pulse and checkbox glow effects
  ‚Ä¢ Integrated error/success alert box styling for email/OTP feedback
  ‚Ä¢ Ensured responsive alignment with consistent header/footer positioning

üé® Updated:
- `styles.css`
  ‚Ä¢ Centralized theme colors, gradients, and text shadows
  ‚Ä¢ Added shared fantasy UI components (buttons, containers, headers, checkboxes)
  ‚Ä¢ Implemented consistent centering via `.login-wrapper` and `.register-box`
  ‚Ä¢ Unified hover animations (`goldPulse`, `sparkleBurst`) across pages
  ‚Ä¢ Added responsive adjustments for all page layouts

üñºÔ∏è Added assets:
- `/images/openbook.jpeg` ‚Äî main hero image for welcome page
- `/images/hero-bg.jpeg` ‚Äî shared login/register background

üì± Result:
Unified, immersive fantasy theme across landing, login, and registration pages.
Consistent animation behavior, responsive layouts, and readable contrast on all screens.
