Milestone 1 Contributions:
Week 1: Updated pom.xml to target Java 17 and ensured compatibility with Spring Boot 3.

        Implemented JWT Security setup:

        Added SecurityConfig.java with stateless session handling and JWT filter.

        Created JwtAuthenticationFilter to validate tokens on requests.

        Built JwtService for token generation, validation, and username extraction.

        Added CustomUserDetailsService to load user credentials from the database.

        Configured BCryptPasswordEncoder for secure password hashing.

        Developed AuthController with /api/auth/login endpoint to authenticate users and return JWT tokens.

        Verified and updated User entity & UserRepository so authentication works with the DB.

        Configured application.properties:

        Set up H2 in-memory database for testing.

        Enabled Hibernate ddl-auto=create-drop for clean schema on each restart.

        Enabled /h2-console for debugging database content.

        Resolved merge conflicts in:

        application.properties (kept JWT + H2 config).

        pom.xml (merged in spring-security-test, Thymeleaf, and Actuator).

        Ensured the application now builds successfully and can run with JWT authentication enabled.

Learning Experience

        This week deepened my understanding of Spring Security with JWT and the importance of clean dependency management.
        Resolving merge conflicts reinforced best practices for collaborative Git workflows. Configuring the H2 database
        and Hibernate taught me effective strategies for rapid testing and schema resets. Overall, I gained practical
        experience in backend authentication and team-based development that will benefit future milestones.
Week 2 & 3:
Backend & Security Updates
•	Replaced JWT stateless authentication with stateful session-based authentication integrated with Spring Security and Thymeleaf.
•	Configured SecurityConfig.java to handle custom login/logout, session cookies, and redirect handling.
•	Updated AuthController.java to focus only on user registration (login/logout now fully managed by Spring Security).
•	Updated CustomUserDetailsService.java to load users from the database and apply a default USER role without requiring a roles table.
•	Removed unused JWT files (JwtService, JwtAuthenticationFilter) and cleaned up imports/dependencies in pom.xml.
•	Secured static resources (/css/**, /js/**, /images/**, /favicon.ico) to ensure proper page rendering without login issues.
•	Strengthened database configuration in application.properties and prepared for environment variable integration.
Frontend Integration
•	Connected Thymeleaf login (loginBSF.html) and registration (register.html) pages with the new Spring Security session-based backend.
•	Verified redirects: successful login goes to /welcome, failed login redirects with error flag.
DevOps & CI/CD
•	Added a GitHub Actions CI workflow (maven-ci.yml) to automatically run Maven build and tests on each push/PR.
•	Structured .github/workflows folder in the repo and confirmed integration with GitHub Actions.
•	Started preparations for environment variable usage (DB_USER, DB_PASS) in CI/CD pipelines.
Current Status (End of Milestone 1)
•	User can register, log in, and log out via the browser.
•	Session-based authentication works correctly with Spring Security.
•	Frontend pages (login, register, welcome) are integrated with backend.
•	CI pipeline in place with GitHub Actions running Maven build/tests.


Milestone 2
    Week 1:

    Focus: Transactions and Security

    Added new Transaction, TransactionRepository, TransactionService, and TransactionController files to support user-to-user point transfers.

    Updated SecurityConfig.java to secure /api/transactions/** and keep session-based login and logout working.

    Created LoreVoteRepository.java and VoteController.java to start the voting system for story parts.

    Connected voting to TransactionService so users can earn or spend points when voting.

    Fixed build issues in VoteController and synced database entity changes.

    Added WebSocketConfig.java to prepare for messaging and real-time updates in later milestones.

    Verified that all new API routes require login and the project builds successfully in Maven.